?xaringan::moon_reader
knitr::opts_chunk$set(echo = FALSE)
plot(cars)
table(cars)
install.packages("rlang")
library(acepack)
install.packages("questionr", dep = TRUE)
install.packages("Hmisc", dep = TRUE)
# R comme une grosse calculatrice
2+2
# Calcul simple
(12+15+20)/3
# Créer un objet en utilisant l'opérateur d'assignation "<-" dans lequel on stocke le résultat du calcul
moyenne <- (12+15+20)/3
# Pour voir le contenu de son objet, tapper son nom
moyenne  # Utilisation implicite de la fonction print()
# Pour voir le contenu de son objet, tapper son nom
moyenne  # Utilisation implicite de la fonction print()
# Créer un nouvel objet nommé "age" composé d’une série de 5 nombres avec la fonction c() (concaténer)
age <- c(12, 15, 20, 35, 40)
# Voir le contenu de l'objet
age
# Passer cet objet comme 1er argument de la fonction mean()
mean(age)
# Arrondir le résultat sans décimale (argument digits=) en imbriquant la fonction mean() dans la fonction round()
round(mean(age), digits=0)
# Arrondir le résultat sans décimale (argument digits=) en imbriquant la fonction mean() dans la fonction round()
round(mean(age), digits=3)
# Arrondir le résultat sans décimale (argument digits=) en imbriquant la fonction mean() dans la fonction round()
round(mean(age), digits=0)
library(R6)
detach("package:R6", unload = TRUE)
# R comme une grosse calculatrice
2+2
# R comme une grosse calculatrice
2+2
# Calcul simple
(12+15+20)/3
# Créer un objet en utilisant l'opérateur d'assignation "<-" dans lequel on stocke le résultat du calcul
moyenne <- (12+15+20)/3
# Pour voir le contenu de son objet, tapper son nom
moyenne  # Utilisation implicite de la fonction print()
# Créer un nouvel objet nommé "age" composé d’une série de 5 nombres avec la fonction c() (concaténer)
age <- c(12, 15, 20, 35, 40)
# Voir le contenu de l'objet
age
# Passer cet objet comme 1er argument de la fonction mean()
mean(age)
# Arrondir le résultat sans décimale (argument digits=) en imbriquant la fonction mean() dans la fonction round()
round(mean(age), digits=0)
age <- c(25, 36, 47, 58, 69, NA)  # Créer un vecteur composé de 5 chiffres et une valeur manquante
age
mean(age)    # OUPS!
help(mean)  # Pour afficher l'aide d'une fonction (ou ?mean)
mean(age, na.rm=TRUE, trim = 0.05)
# On crée des vecteurs principalement avec la commande c()
poids <- c(70, 65, 60)  # vecteur numérique
sexe <- c("femme", "homme", "femme")  # vecteur textuel
taille <- c(TRUE, FALSE, FALSE, TRUE)  # vecteur booléen
# Pour voir le "format" des éléments stockés dans un objet, utiliser la fonction mode() ou typeof()
mode(poids)
ls()
data(package = .packages(all.available = TRUE))
## Voir les bases de données dans un module chargé particulier
data(package="questionr")
## Importer une base de données dans un module chargé particulier
data(hdv2003)
library(questionr)
## Importer une base de données dans un module chargé particulier
data(hdv2003)
View(hdv2003)
# R a automatiquement créé un objet au nom de la base importée dans notre environnement de travail
hdv2003
bd <- hdv2003
ls()
View(hdv2003)
rm(hdv2003)  # Supprimer la base de données originale
bd # visualiser la base de données complète
head(bd) # visualiser les 6 premières observations (modifier le nombre par défaut après une virgule: (bd, 4))
tail(bd) # visualiser les 6 dernières observations
names(bd) # noms des variables
ncol(bd) # nombre de variables
nrow(bd) # nombre d'observations
dim(bd) # nombre de dimensions (colonnes et lignes)
class(bd) # type d'objet
str(bd)    # description plus détaillée de la structure du tableau
bd[ ,2]       # Sélectionner la deuxième variable
bd[ ,3:6]	    # Sélectionner les variables 3 à 6 (notez l'opérateur `:`, raccourci de la fonction `seq()`)
bd[ ,c(3,6)]	# Sélectionner les variables 3 et 6 (peut aussi sélectionner dans le désordre)
bd[ ,-2]    	# Sélectionner toutes les variables sauf la deuxième
bd[3:6, ]       # Sélectionner les observations de 3 à 6
bd2 <- bd[1:100, c(1:5,10)] # Sélectionner les 100 premières observations et les variables de 1 à 5 et 10
bd2 # voir le contenu de la nouvelle bd2
bd["relig"] # Sélectionner une variable (contenu textuel entre guillemets simples ou doubles)
bd$sexe # Sélectionner la variable sexe
length(bd$sexe) # Nombre d'observations
str(bd$sexe) # Structure de la variable
head(bd$sexe) # Premières observations de la variable
bd$sexe=="Femme"
bd.f <- bd[bd$sexe=="Femme", ]
bd.m <- bd[bd$sexe=="Homme", ]
bd[bd$occup == "Retraite" | bd$occup == "Au foyer", ] # avec l'opérateur | (ou)
library(jpeg)
detach("package:jpeg", unload = TRUE)
# R comme une grosse calculatrice
2+2
# Calcul simple
(12+15+20)/3
# Créer un objet en utilisant l'opérateur d'assignation "<-" dans lequel on stocke le résultat du calcul
moyenne <- (12+15+20)/3
# Créer un objet en utilisant l'opérateur d'assignation "<-" dans lequel on stocke le résultat du calcul
moyenne <- (12+15+20)/3
# Pour voir le contenu de son objet, tapper son nom
moyenne  # Utilisation implicite de la fonction print()
age <- c(12, 15, 20, 35, 40)
# Voir le contenu de l'objet
age
# Passer cet objet comme 1er argument de la fonction mean()
mean(age)
# Arrondir le résultat sans décimale (argument digits=) en imbriquant la fonction mean() dans la fonction round()
round(mean(age), digits=0)
age <- c(25, 36, 47, 58, 69, NA)  # Créer un vecteur composé de 5 chiffres et une valeur manquante
mean(age)    # OUPS!
help(mean)  # Pour afficher l'aide d'une fonction (ou ?mean)
mean(age, na.rm=TRUE, trim = 0.05)
poids <- c(70, 65, 60)  # vecteur numérique
sexe <- c("femme", "homme", "femme")  # vecteur textuel
taille <- c(TRUE, FALSE, FALSE, TRUE)  # vecteur booléen
# Pour voir le "format" des éléments stockés dans un objet, utiliser la fonction mode() ou typeof()
mode(poids)
# crée un vecteur nommé "poids" avec la fonction c() composé de 3 éléments numériques
poids <- c(70, 65, 60)
# crée un vecteur nommé "taille" avec la fonction c() composé de 3 éléments numériques au carré
taille <- c(1.45, 1.60, 1.70) ^ 2
# diviser l'objet "poids" par l'objet "taille" (Attention! Les vecteurs doivent être de même longueur, sinon le principe de "recyclage" s'applique)
IMC <- poids / taille
# voir le contenu de l'objet
IMC
# obtenir la médiane des éléments de l'objet
median(IMC)
# obtenir les différences à la moyenne des éléments de l'objet
IMC - mean(IMC)
# Pour voir le "format" des éléments stockés dans un objet, utiliser la fonction mode() ou typeof()
mode(poids)
class(poids)
class(taille)
type(taille)
str(taille)
# Créer une variable de type facteur à partir d'un vecteur textuel de 4 valeurs de 2 niveaux avec la fonction factor()
sexe <- factor(c("H", "H", "F", "H"), labels = c("Homme", "Femme"))
# L'objet est un facteur avec 2 modalités (niveaux) définies par défaut en fonction des valeurs fournies
str(sexe)
# Créer un dataframe avec 3 variables (2 vecteurs numériques et 1 vecteur textuel) avec la fonction data.frame()
age <- c(45,65,22,38,54,31,29,44,56,67)
poids <- c(150,125,210,175,110,180,130,155,190,120)
sexe <- c("H","F","F","H","H","F","F","H","F","H")
bd <- data.frame(age, sexe, poids)
bd
str(bd)
data(package = .packages(all.available = TRUE))
## Voir les bases de données dans un module chargé particulier
data(package="questionr")
## Importer une base de données dans un module chargé particulier
data(hdv2003)
library(questionr)
# R a automatiquement créé un objet au nom de la base importée dans notre environnement de travail
hdv2003
library(questionr)
## Importer une base de données dans un module chargé particulier
data(hdv2003)
# R a automatiquement créé un objet au nom de la base importée dans notre environnement de travail
hdv2003
hdv2003
bd <- hdv2003
rm(hdv2003)  # Supprimer la base de données originale
bd # visualiser la base de données complète
head(bd) # visualiser les 6 premières observations (modifier le nombre par défaut après une virgule: (bd, 4))
head(bd, 3) # visualiser les 6 premières observations (modifier le nombre par défaut après une virgule: (bd, 4))
tail(bd) # visualiser les 6 dernières observations
names(bd) # noms des variables
ncol(bd) # nombre de variables
nrow(bd) # nombre d'observations
dim(bd) # nombre de dimensions (colonnes et lignes)
class(bd) # type d'objet
bd[ ,2]       # Sélectionner la deuxième variable
bd[ ,3:6]	    # Sélectionner les variables 3 à 6 (notez l'opérateur `:`, raccourci de la fonction `seq()`)
bd[ ,c(3,6)]	# Sélectionner les variables 3 et 6 (peut aussi sélectionner dans le désordre)
bd[ ,-2]    	# Sélectionner toutes les variables sauf la deuxième
bd[ ,-(3:6)]	# Toutes les variables sauf 3 à 6
bd[3:6, ]       # Sélectionner les observations de 3 à 6
bd2 <- bd[1:100, c(1:5,10)] # Sélectionner les 100 premières observations et les variables de 1 à 5 et 10
bd["relig"] # Sélectionner une variable (contenu textuel entre guillemets simples ou doubles)
bd[,"relig"] # Sélectionner une variable (contenu textuel entre guillemets simples ou doubles)
bd["relig"] # Sélectionner une variable (contenu textuel entre guillemets simples ou doubles)
bd[ ,c("occup", "relig")] # Sélectionner deux variables
bd["relig"] # Sélectionner une variable (contenu textuel entre guillemets simples ou doubles)
bd[ ,c("occup", "relig")] # Sélectionner deux variables
bd[4] # Sélectionner une variable (contenu textuel entre guillemets simples ou doubles)
bd[ ,2]       # Sélectionner la deuxième variable
bd[2]       # Sélectionner la deuxième variable
bd[2,]       # Sélectionner la deuxième variable
bd[ ,2]       # Sélectionner la deuxième variable
bd[2]       # Sélectionner la deuxième variable
bd[ ,c("occup", "relig")] # Sélectionner deux variables
bd["occup", "relig"] # Sélectionner deux variables
,c(
bd[ ,c("occup", "relig")] # Sélectionner deux variables
bd$sexe # Sélectionner la variable sexe
length(bd$sexe) # Nombre d'observations
str(bd$sexe) # Structure de la variable
head(bd$sexe) # Premières observations de la variable
bd$sexe=="Femme"
bd.f <- bd[bd$sexe=="Femme" ]
bd.f <- bd[bd$sexe=="Femme", ]
bd.m <- bd[bd$sexe=="Homme", ]
bd.cadre3 <- subset(bd, qualif=="Cadre" & age<50, select= c(id,qualif, age))
# Sélectionner la première observation de la variable quantitative age
bd$age[1]
# Modifier la valeur
bd$age[1] <-  38
# Sélectionner la première observation de la variable qualitative (facteur) sexe
bd$sexe[1]
# Modifier la valeur (information textuelle entre guillemet)
bd$sexe[1] <- "Homme"
# Sélectionner la première observation de la variable qualitative (facteur) sexe
bd$sexe[1]
# Modifier avec une autre valeur
bd$sexe[1] <- "Autre" # NON! Puisque c'est un facteur, la modalité (levels) doit avoir été prévue (ça fonctionnerait pour une variable "caractère")
# Il faut d'abord modifier les niveaux permis avec la fonction factor() et son argument levels=
bd$sexe <- factor(bd$sexe, levels=c("Femme", "Homme", "Autre"))
# Modifier avec une autre valeur
bd$sexe[1] <- "Autre" # NON! Puisque c'est un facteur, la modalité (levels) doit avoir été prévue (ça fonctionnerait pour une variable "caractère")
# Modifier la valeur (information textuelle entre guillemet)
bd$sexe[1] <- "Homme"
# Modifier avec une autre valeur
bd$sexe[1] <- "Autre" # NON! Puisque c'est un facteur, la modalité (levels) doit avoir été prévue (ça fonctionnerait pour une variable "caractère")
# Sélectionner la première observation de la variable qualitative (facteur) sexe
bd$sexe[1]
data(package = .packages(all.available = TRUE))
## Voir les bases de données dans un module chargé particulier
data(package="questionr")
library(car)       # ou require()
library(questionr)
library(psych)
library(Hmisc)
library(ggplot2)
data(package = .packages(all.available = TRUE))
## Voir les bases de données dans un module chargé particulier
data(package="questionr")
## Importer une base de données dans un module chargé particulier
data(hdv2003)
# R a automatiquement créé un objet au nom de la base importée dans notre environnement de travail
hdv2003
bd <- hdv2003
rm(hdv2003)  # Supprimer la base de données originale
bd # visualiser la base de données complète
head(bd) # visualiser les 6 premières observations (modifier le nombre par défaut après une virgule: (bd, 4))
head(bd, 3) # visualiser les 6 premières observations (modifier le nombre par défaut après une virgule: (bd, 4))
tail(bd) # visualiser les 6 dernières observations
names(bd) # noms des variables
ncol(bd) # nombre de variables
nrow(bd) # nombre d'observations
dim(bd) # nombre de dimensions (colonnes et lignes)
class(bd) # type d'objet
str(bd)    # description plus détaillée de la structure du tableau
bd[ ,2]       # Sélectionner la deuxième variable
bd[ ,3:6]	    # Sélectionner les variables 3 à 6 (notez l'opérateur `:`, raccourci de la fonction `seq()`)
bd[ ,-2]    	# Sélectionner toutes les variables sauf la deuxième
bd[ ,-(3:6)]	# Toutes les variables sauf 3 à 6
bd[3:6,]       # Sélectionner les observations de 3 à 6
bd2 <- bd[1:100, c(1:5,10)] # Sélectionner les 100 premières observations et les variables de 1 à 5 et 10
bd["relig"] # Sélectionner une variable (contenu textuel entre guillemets simples ou doubles)
bd[ ,c("occup", "relig")] # Sélectionner deux variables
bd$sexe # Sélectionner la variable sexe
length(bd$sexe) # Nombre d'observations
str(bd$sexe) # Structure de la variable
head(bd$sexe) # Premières observations de la variable
bd$sexe=="Femme"
bd.f <- bd[bd$sexe=="Femme", ]
bd.m <- bd[bd$sexe=="Homme", ]
bd.cadre3 <- subset(bd, qualif=="Cadre" & age<50, select= c(id,qualif, age))
# Sélectionner la première observation de la variable quantitative age
bd$age[1]
# Modifier la valeur
bd$age[1] <-  38
# Sélectionner la première observation de la variable quantitative age
bd$age[1]
# Sélectionner la première observation de la variable qualitative (facteur) sexe
bd$sexe[1]
# Modifier la valeur (information textuelle entre guillemet)
bd$sexe[1] <- "Homme"
# Sélectionner la première observation de la variable qualitative (facteur) sexe
bd$sexe[1]
# Modifier avec une autre valeur
bd$sexe[1] <- "Autre" # NON! Puisque c'est un facteur, la modalité (levels) doit avoir été prévue (ça fonctionnerait pour une variable "caractère")
# Il faut d'abord modifier les niveaux permis avec la fonction factor() et son argument levels=
bd$sexe <- factor(bd$sexe, levels=c("Femme", "Homme", "Autre"))
# Modifier avec une autre valeur
bd$sexe[1] <- "Autre" # NON! Puisque c'est un facteur, la modalité (levels) doit avoir été prévue (ça fonctionnerait pour une variable "caractère")
# Sélectionner la première observation de la variable qualitative (facteur) sexe
bd$sexe[1]
# Agréger et renommer des catégories de la variable "relig" dans la nouvelle variable bd$relig.rec
bd$relig[bd$relig == "Pratiquant regulier"] <- "Pratiquant"
# Agréger et renommer des catégories de la variable "relig" dans la nouvelle variable bd$relig.rec
bd$relig.rec[bd$relig == "Pratiquant regulier"] <- "Pratiquant"
bd$relig.rec[bd$relig == "Pratiquant occasionnel"] <- "Pratiquant"
bd$relig.rec[bd$relig == "Appartenance sans pratique"] <- "Croyant"
bd$relig.rec[bd$relig == "Ni croyance ni appartenance"] <- "Athée"
bd$relig.rec[bd$relig == "Rejet"] <- "ND"
bd$relig.rec[bd$relig == "NSP ou NVPR"] <- "ND"
str(bd$relig.rec) # Fonction str() pour voir le format de notre nouvelle variable
bd$age.cat <- cut(bd$age, breaks=c(0, 20, 40, 60, 80, 100), labels=c("20 ans et moins", "21 à 40", "41 à 60", "61 à 80", "81 et plus"), ordered_result=TRUE)
str(bd$age.cat)
bd$age.cat
summary(bd) # Résumé de la base de données
summary(bd$age) # Résumé d'une variable quantitative
summary(bd$occup) # Résumé d'une variable qualitative
skew(bd$heures.tv, na.rm=TRUE) # module psych
# Pour appliquer une fonction sur plusieurs variables à la fois
apply(bd[ ,c("age", "heures.tv","freres.soeurs")], na.rm=TRUE, MARGIN=1, FUN=mean)
# Pour appliquer une fonction sur plusieurs variables à la fois
apply(bd[ ,c("age", "heures.tv","freres.soeurs")], na.rm=TRUE, MARGIN=2, FUN=mean)
table(bd$freres.soeurs)    # var numérique
table(bd$qualif)
tb.cat <- table(bd$qualif) # var quali (résultat pareil à summary())
prop.table(tb.cat) # Appliquée à une table pour transformer les valeurs en proportions
round((prop.table(tb.cat))*100)
freq(bd$qualif) # affiche les NA par défaut
freq(bd$qualif, cum = TRUE, total = TRUE, sort = "inc", digits = 0, exclude = NA)
tb <-table(bd$trav.satis, bd$sexe)
table(bd$trav.satis, bd$sexe)
# Ajouter les totaux des effectifs
addmargins(tb)
# % Totaux
prop(tb)
# % Totaux
prop.table(tb, margin = 2)
cprop(tb, percent = TRUE)    # % en colonnes
rprop(tb, percent = TRUE, digits = 0)    # % en lignes
# On fait varier la couleur selon une variable sexe et on "flip" le tout
ggplot(bd, aes(x = sexe, y = freres.soeurs, color = sexe)) + geom_boxplot() + coord_flip()
ggplot(bd, aes(x = age, color = sexe, fill=sexe)) +
geom_density(alpha=0.55)
### ajouter une droite de régression + lignes de densité
ggplot(bd, aes(x=age, y=freres.soeurs)) +
geom_point(col="steelblue2") +
geom_smooth(method="lm", col="thistle3") +
geom_density2d(color = "orange") +
scale_x_log10()
ggplot(bd) +
geom_point(aes(x = age, y = heures.tv, color=sexe, size=heures.tv), alpha=0.2) +
scale_size("Heures de télé", range = c(1,10)) +
scale_x_continuous("Age", limits = c(15,100)) +
scale_y_continuous("Heures de télé", limits = c(0,15))
ggplot(bd) +
geom_point(aes(x = age, y = freres.soeurs, color = sexe), size=3, pch=19) +
scale_color_brewer("sexe", palette = "Accent") +
theme(legend.position = "bottom", legend.box = "vertical") # ou appliquer des thèmes prédéfinis comme theme_dark()
ggplot(bd) +
geom_histogram(aes(x = age), fill="orchid1", colour = "white", binwidth = 5) +  # arguments de couleurs et largeur des barres
ggtitle("Age des répondants") +   # titre du graphique
xlab("Age") +                     # titre axe x
ylab("Effectifs")                 # titre axe y
### ajouter une droite de régression + lignes de densité
ggplot(bd, aes(x=age, y=freres.soeurs)) +
geom_point(col="steelblue2") +
geom_smooth(method="lm", col="thistle3") +
geom_density2d(color = "orange") +
scale_x_log10()
ggplot(bd) +
geom_point(aes(x = age, y = heures.tv, color=sexe, size=heures.tv), alpha=0.2) +
scale_size("Heures de télé", range = c(1,10)) +
scale_x_continuous("Age", limits = c(15,100)) +
scale_y_continuous("Heures de télé", limits = c(0,15))
ggplot(bd) +
geom_point(aes(x = age, y = freres.soeurs, color = sexe), size=3, pch=19) +
scale_color_brewer("sexe", palette = "Accent") +
theme(legend.position = "bottom", legend.box = "vertical") # ou appliquer des thèmes prédéfinis comme theme_dark()
plot(table(bd$freres.soeurs),
col="red",
main = "Nombre de frères et soeurs",
ylab = "Effectif",
xlab="Nombre de frères et soeurs",
ylim=c(1, 500),
xlim=c(0, 25),
type="b")
plot(bd$age, bd$heures.tv)  # var quanti/quanti
points(bd$age[bd$sexe=="Homme"], bd$heures.tv[bd$sexe=="Homme"], pch=16, col="steelblue")
points(bd$age[bd$sexe=="Femme"], bd$heures.tv[bd$sexe=="Femme"], pch=16, col="orange")
legend("topright", legend=c("Homme","Femme"), col=c("steelblue","orange"), pch=c(16))
data(package = .packages(all.available = TRUE))
## Voir les bases de données dans un module chargé particulier
data(package="questionr")
## Importer une base de données dans un module chargé particulier
data(hdv2003)
library(questionr)
## Importer une base de données dans un module chargé particulier
data(hdv2003)
# R a automatiquement créé un objet au nom de la base importée dans notre environnement de travail
hdv2003
bd <- hdv2003
rm(hdv2003)  # Supprimer la base de données originale
bd # visualiser la base de données complète
head(bd) # visualiser les 6 premières observations (modifier le nombre par défaut après une virgule: (bd, 4))
head(bd, 3) # visualiser les 6 premières observations (modifier le nombre par défaut après une virgule: (bd, 4))
names(bd) # noms des variables
ncol(bd) # nombre de variables
nrow(bd) # nombre d'observations
bd[ c(5,15)] <- NULL # Supprimer plusieurs variables
bd[ ,2]       # Sélectionner la deuxième variable
bd[ 2]       # Sélectionner la deuxième variable
bd$sexe[2] # Sélectionner la variable sexe
bd$age[2] # Sélectionner la variable sexe
bd[2]
bd$age[2,2] # Sélectionner la variable sexe
bd[2,2]
bd$age[2] # Sélectionner la variable sexe
bd[40]       # Sélectionner la deuxième variable
by(bd$age, bd$sexe, mean, na.rm=TRUE)
tapply(bd$age, bd$sexe, mean, na.rm=TRUE)
tapply(bd$relig, bd$sexe, table)
by(bd$relig, bd$sexe, table)
tappl
tapply(bd$relig, bd$sexe, table)
tb.eff <- table(bd$trav.satis, bd$sexe) # tableau d'effectifs
tb.prop <- cprop(tb.eff, total = FALSE) # tableau de proportions
barplot(tb.eff , legend = levels(bd$trav.satis))
barplot(tb.prop, beside = TRUE, xlab = "Satisfaction", ylab = "pourcentages", las=2, ylim=c(0, 100),
col = c("blue", "green", "orange"), legend = levels(bd$trav.satis))
boxplot(bd$heures.tv, main="Heures d'écoute de la télé", col="green", xlab = "légende horizontale", ylab = "Heures d'écoute" )
boxplot(age ~ hard.rock, bd)
setwd("~/GitHub/crlnp/intro-Rstudio")
source('~/.active-rstudio-document')
l <- leaflet() %>% addTiles() %>%
setView(long, lat,  zoom = 17)
l
l %>% addMarkers(long, lat,
popup = "AssessFirst",
label = "2O rue du Sentier")
library(leaflet)
library(tidyverse)
l <- leaflet() %>% addTiles() %>%
setView(long, lat,  zoom = 17)
l
l %>% addMarkers(long, lat,
popup = "AssessFirst",
label = "2O rue du Sentier")
library(leaflet)
library(leaflet)
long <- 2.346
lat  <- 48.8695
l <- leaflet() %>% addTiles() %>%
setView(long, lat,  zoom = 17)
l
l %>% addMarkers(long, lat,
popup = "AssessFirst",
label = "2O rue du Sentier")
library(leaflet)
long <- -73.61146688388745
lat  <- 45.496210251530165
carte <- leaflet() %>% addTiles() %>%
setView(long, lat,  zoom = 20)
carte
carte %>% addMarkers(long, lat,
popup = "AssessFirst",
label = "Université de Montréal")
carte %>% addMarkers(long, lat,
label = "Université de Montréal")
library(leaflet)
long <- 2.346
lat  <- 48.8695
l <- leaflet() %>% addTiles() %>%
setView(long, lat,  zoom = 17)
l
l %>% addMarkers(long, lat,
popup = "AssessFirst",
label = "2O rue du Sentier")
library(leaflet)
long <- 2.346
lat  <- 48.8695
library(leaflet)
long <- -73.61498594223592
lat  <- 45.504331748097854
carte <- leaflet() %>% addTiles() %>%
setView(long, lat,  zoom = 19)
carte
l %>% addMarkers(long, lat,
popup = "AssessFirst",
label = "Université de Montréal")
carte %>% addMarkers(long, lat,
popup = "AssessFirst",
label = "Université de Montréal")
carte %>% addMarkers(long, lat,
label = "Université de Montréal")
library(leaflet)
carte <- leaflet() %>% addTiles() %>%
setView(-73.61498594223592, 45.504331748097854,  zoom = 19)
carte
carte %>% addMarkers(long, lat,
label = "Université de Montréal")
library(leaflet)
popup = c("Robin", "Jakub", "Jannes")
leaflet() %>%
addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") %>%
addMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
